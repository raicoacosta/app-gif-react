{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/userFetchGits.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6LAIaA,EAAa,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAiB/C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC/CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAST,EACTU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCTnBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAWH,GADhD,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KACFC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,QARvB,kBAYXM,GAZW,4CAAH,sDCENO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,yBAAKc,UAAU,4DACX,yBAAKC,IAAMf,EAAMgB,IAAI,KACrB,2BAAIN,KCFHO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAhBAC,qBAAW,WAEPxB,EAAOC,GACFwB,MAAM,SAACC,GAEJC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAQ,MAEb,UAIZ,CAACpB,IAEGqB,EDnBwBM,CAAa3B,GAAhCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAGpB,OACI,oCACI,4BAAKpB,GACHoB,GAAW,sCAEb,yBAAKJ,UAAU,aAEPH,EAAOJ,KAAK,SAAEC,GAAF,OACR,kBAAC,EAAD,eACAkB,IAAKlB,EAAIC,IACJD,UEfhBmB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,oCACI,4CACA,kBAAC,EAAD,CACIA,cAAiBA,IAErB,6BAEA,4BAEQS,EAAWe,KAAK,SAACT,GAAD,OACZ,kBAAC,EAAD,CACIA,SAAUA,EACV4B,IAAK5B,UChBjC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.20af023a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory =( { setCategories } ) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputValue( e.target.value );        \n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if(inputValue.trim().length > 2){\n            setCategories( (categories) => [inputValue, ...categories] )\n            setinputValue(''); \n        }\n    }\n\n    return (\n        <form onSubmit= { handleSubmit }>\n            <input \n                type=\"text\"\n                value= { inputValue }\n                onChange={ handleInputChange }\n                />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n","export const getGif = async ( category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=V2Q6m5gXrmvzvmwwflyGIG2CzEKGgZaE`;\n    const resp = await fetch(url);\n    const { data } = await resp.json()\n    const gifs = data.map( (img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_large.url\n        }\n    });\n    \n    return(gifs);\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__wobble animate__delay-1s\">\n            <img src={ url } alt=\"\" ></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/userFetchGits'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n    \n    const {data:images, loading} = useFetchGifs(category);\n    \n    \n    return (\n        <>\n            <h3>{category}</h3>\n            { loading && <p>Loading</p>  }\n\n            <div className=\"card-grid\">\n                { \n                    images.map( ( img )=> (\n                        <GifGridItem \n                        key={img.id}\n                        { ...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true     \n    });\n    useEffect( () => {\n\n        getGif(category)\n            .then( (imgs) => {\n\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading:false\n                    });\n                }, 3000);\n\n            })\n            \n    }, [category]);\n\n    return state;\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport {GifGrid}  from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One punch'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory \n                setCategories= { setCategories }\n            />\n            <hr />\n            \n            <ol>\n                { \n                    categories.map( (category) => (\n                        <GifGrid\n                            category={category}\n                            key={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}